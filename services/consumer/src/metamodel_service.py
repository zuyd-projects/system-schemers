import requests
import uuid
from config import METAMODEL_SERVICE_URL

def create_model():
    """
    Create a new model in the Metamodel Service.
    Returns:
        int: The ID of the created model.
    """
    try:
        payload = {
            "name": f"Model_{uuid.uuid4().hex[:8]}",
            "description": "Generated by NLP Consumer",
            "version": 1
        }
        response = requests.post(f"{METAMODEL_SERVICE_URL}/model", json=payload, timeout=10)
        if response.status_code == 201:
            print(f"Successfully created model: {response.json()['name']}")
            return response.json()["id"]
        else:
            print(f"Failed to create model: {response.status_code}, {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"Error creating model: {e}")
    return None

def create_object_type(cls, model_id):
    """
    Create an ObjectType in the Metamodel Service.
    Args:
        cls (dict): Class information.
        model_id (int): Model ID to associate with this ObjectType.
    Returns:
        int: The ID of the created ObjectType.
    """
    try:
        payload = {
            "name": cls["name"],
            "description": "Generated by NLP Consumer",
            "modelId": model_id
        }
        response = requests.post(f"{METAMODEL_SERVICE_URL}/objectType", json=payload, timeout=10)
        if response.status_code == 201:
            print(f"Successfully created ObjectType: {cls['name']}")
            return response.json()["id"]
        else:
            print(f"Failed to create ObjectType: {response.status_code}, {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"Error creating ObjectType: {e}")
    return None

def create_attributes(attributes, object_type_id, class_name):
    """
    Create attributes for an ObjectType in the Metamodel Service.
    Args:
        attributes (list): List of attribute dictionaries.
        object_type_id (int): ObjectType ID to associate with the attributes.
        class_name (str): The name of the class (for logging purposes).
    """
    for field in attributes:
        try:
            payload = {
                "name": field.split(":")[0].strip(),
                "datatype": field.split(":")[1].strip() if ":" in field else "unknown",
                "objectTypeId": object_type_id
            }
            response = requests.post(f"{METAMODEL_SERVICE_URL}/attribute", json=payload, timeout=10)
            if response.status_code == 201:
                print(f"Successfully added attribute {payload['name']} to {class_name}")
            else:
                print(f"Failed to add attribute: {response.status_code}, {response.text}")
        except requests.exceptions.RequestException as e:
            print(f"Error adding attribute {field}: {e}")

def create_relationships(relationships, object_type_id, class_name):
    """
    Create relationships (FactType and Predicator) for an ObjectType.
    Args:
        relationships (list): List of relationship dictionaries.
        object_type_id (int): ObjectType ID to associate with these relationships.
        class_name (str): The name of the class (for logging purposes).
    """
    for relation in relationships:
        try:
            # Create FactType
            fact_type_payload = {
                "name": f"{class_name}To{relation['target']}",
                "description": "Generated by NLP Consumer",
                "concId": "FactType",
                "cnstId": "Association",
                "predicatorSetType": "Binary"
            }
            fact_type_response = requests.post(f"{METAMODEL_SERVICE_URL}/factType", json=fact_type_payload, timeout=10)
            if fact_type_response.status_code == 201:
                fact_type_id = fact_type_response.json()["id"]
                print(f"Successfully created FactType: {fact_type_payload['name']}")

                # Create Predicator
                predicator_payload = {
                    "name": relation["type"],
                    "factTypeId": fact_type_id,
                    "objectTypeId": object_type_id,
                    "multiplicity": "one or more",  # Example, adjust as needed
                    "verb": relation["type"]
                }
                predicator_response = requests.post(f"{METAMODEL_SERVICE_URL}/predicator", json=predicator_payload, timeout=10)
                if predicator_response.status_code == 201:
                    print(f"Successfully added Predicator {relation['type']} to FactType {fact_type_payload['name']}")
                else:
                    print(f"Failed to add Predicator: {predicator_response.status_code}, {predicator_response.text}")
        except requests.exceptions.RequestException as e:
            print(f"Error creating relationship {relation}: {e}")

def send_to_metamodel_service(classes, model_id):
    """
    Send the extracted class information to the Metamodel Service via POST request.
    Args:
        classes (list): A list of class dictionaries to send.
        model_id (int): The ID of the model to associate with these classes.
    """
    for cls in classes:
        # Create ObjectType
        object_type_id = create_object_type(cls, model_id)
        if not object_type_id:
            continue

        # Create Attributes
        create_attributes(cls.get("fields", []), object_type_id, cls["name"])

        # Create Relationships
        create_relationships(cls.get("relations", []), object_type_id, cls["name"])